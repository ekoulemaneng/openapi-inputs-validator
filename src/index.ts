import { Format, KeywordDefinition } from 'ajv'
import { addNewFormats, addKeywords } from './ajv'
import { AjvValidatorsIndex, ajvValidatorsGenerator } from './validators'
import { OpenAPI } from './parser/types'
import * as errors from './parser/errors'

type Operation = 'get' | 'put' | 'post' | 'delete' | 'options' | 'head' | 'patch' | 'trace'

type Inputs = {
    path?: Record<string, any>
    headers?: Record<string, any>
    cookies?: Record<string, any>
    query?: Record<string, any>
    body?: any
}

type Options = { 
    formats?: Record<string, Format>
    keywords?: Array<string | KeywordDefinition> 
}

/**
 * AJV validators generator from an OpenAPI specification
 * @param spec Object or file (json or yaml) containing the OpenAPI specification. Mandatory.
 * @param options Settings for validators generating. Optional. An object with the following keys: type ('resquest', 'responses' or 'both), formats (new formats) and keywords (new keywords).
 * @returns List of ajv validators
 */
const compile = async (schema: OpenAPI, options?: Options) => {
    if (typeof schema === 'undefined') throw errors.SchemaNotProvided
    if (typeof options?.formats !== 'undefined') addNewFormats(options.formats)
    if (typeof options?.keywords !== 'undefined') addKeywords(options.keywords)
    let validators: Array<AjvValidatorsIndex> = await ajvValidatorsGenerator(schema)
    return validators
}

// Errors
const PathNotString = new Error('path must be a string')
const OperationNotValid = new Error('operation must be \'get\', \'put\', \'post\', \'delete\', \'options\', \'head\', \'patch\' or \'trace\'')
const InputsNotProvided = new Error('inputs are not provided')
const InputsNotObject = new Error('inputs must be an object')
const InputsPropertiesNotValid = new Error('inputs properties must be \'path\', \'headers\', \'cookies\', \'query\' or \'body\'')
const ValidatorsNotProvided = new Error('validators are not provided')

/**
 * Request validation in accordance with the OpenAPI specification provided
 * @param path String that specifies an OpenAPI path. Mandatory.
 * @param operation String that specifies an http operation (get, post, put, delete, patch, options, trace, head). Mandatory.
 * @param inputs Object with optional keys: path (object), header (object), cookies (object), query (object) and body (any). Mandatory.
 * @param validators List of ajv validators generated by @compile function. Mandatory.
 * @returns Boolean value indicating whether inputs is valid accordance with the OpenAPI specification. If false, an abject.
 */
const validate = (path: string, operation: Operation, inputs: Inputs, validators: Array<AjvValidatorsIndex>) => {
    if (typeof path === 'undefined') throw errors.PathNotProvided
    if (typeof path !== 'string') throw PathNotString
    if (typeof operation === 'undefined') throw errors.OperationNotProvided
    if (!['get', 'put', 'post', 'delete', 'options', 'head', 'patch', 'trace'].includes(operation.toLowerCase())) throw OperationNotValid
    if (typeof inputs === 'undefined') throw InputsNotProvided
    if (typeof inputs !== 'object') throw InputsNotObject
    if (Object.keys(inputs).every(key => !['path', 'headers', 'cookies', 'query', 'body'].includes(key))) throw InputsPropertiesNotValid
    if (typeof validators === 'undefined') throw ValidatorsNotProvided
    if (validators.length === 0) return { valid: true, errors: null }
    const _validators = validators.filter(validator => validator.path === path && validator.operation === operation.toLowerCase())
    if (_validators.length < 1) return { valid: false, errors: 'OperationNotSupported' }
    if (_validators.every(validator => typeof validator.contentType !== 'undefined')) {
        const headers = inputs.headers
        if (typeof headers === 'undefined') return { valid: false, errors: 'RequestBodyContentTypeNotProvided' }
        const contentType = headers['Content-Type']
        if (typeof contentType === 'undefined') return { valid: false, errors: 'RequestBodyContentTypeNotProvided' }
    }
    const headers = inputs.headers
    let validator: AjvValidatorsIndex
    if (typeof headers !== 'undefined' && typeof headers['Content-Type'] !== 'undefined') {
        const _validator = _validators.find(validator => validator.contentType === headers['Content-Type'])
        if (!_validator) return { valid: false, errors: 'ContentTypeNotSupported' }
        validator = _validator
    }
    else {
        const _validator = _validators[0]
        if (!_validator) return { valid: true, errors: null }
        validator = _validator
    }
    const validate = validator.validator
    if (typeof validate === 'undefined') return { valid: true, errors: null }
    const result = validate(inputs)
    if (typeof result === 'boolean' && result === true) return { valid: true, errors: null }
    return { valid: false, errors: validate.errors }
}

export { compile, validate }